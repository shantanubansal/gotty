package client

import (
	"encoding/json"
	"fmt"
	"github.com/shantanubansal/gotty/hubble/util"
	"io/ioutil"
	"math/rand"
	nethttp "net/http"
	"time"
)

type HubbleClient struct {
	Endpoint string
}

type UserInfo struct {
	cli        HubbleClient
	Token      string
	ClusterUid string
	HeartBeat  time.Time
	KubeConfig string
	UserName   string
	Password   string
}

var users = map[string]UserInfo{}

func User(token, spc, userUid string) UserInfo {
	//Refresh Token

	// Get Validate and Get KubeConfig

	//create User
	return UserInfo{
		cli:        HubbleClient{},
		Token:      token,
		HeartBeat:  time.Time{},
		KubeConfig: "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNMmFrTkRRV1JMWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplVTFFV1hoT1JFRXpUVVJqTUU5R2IxaEVWRTE1VFVSWmVFMVVRVE5OVkVrd1QwWnZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVEN0TENsSmFVbmQwZWtZNGNIUkhVbk53TkhCbk1YaEJSR1JVZEVKNVdtOU9SV1JRZWpkQlIzZzBlV2xDZWxCVlVVOHpXVkpITkVGVWRuTmxWM0ZWWmxaT01Ga0tURmhSTkdSTFVHNVhTMmh0TWtzdlNUSnJjMHB0SzI1bk56VTFTSGR5VmtjemVIcFZWbnBQZEhZemVHcGhVRTVFWmxkcE1URmpPRzU0TkRGTmEyODBlQXBVU1ROM1FsVlZPSGc1VFdKck56aHJlakp5YzNVelRtbDJMM041Vm0wNFpUQjVMM0psTDFsb1FrcFJNSEI1WWxVd1RXNXlOMk5PVFZCaVQxVlZiMnc0Q21Wc2MzZEdWMkZwY0ZSYVRXVlFXRXRPTkZKNmJqZFNVM2N2UkdJeVRXNW1jelZxVEVoSFMyNUNaME5XTDFsamVFWkRXbUY0ZWtoUVJESnVhWGxrVDJRS1QxQXZObXBqWTJScFluVk9MMkV5V0ZSM1FrYzVjMlk0SzNCRFNqQjBTVkpRWjJWa1ZHRldhazFTUlhVckwyRmpiazFsYVdKTk1YSlJhVEF2TjA1b1JncHZkRFZDVHpWQldVUnFhV3hSTkc1clJXazRRMEYzUlVGQllVNUdUVVZOZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVSkpSMEV4VldSRmQwVkNDaTkzVVVsTlFWbENRV1k0UTBGUlFYZElVVmxFVmxJd1QwSkNXVVZHUjNCcVNVNXFlVE5yUlU1bWVVOTRXbmMzUlM5SGRGSTRNUzl0VFVFd1IwTlRjVWNLVTBsaU0wUlJSVUpEZDFWQlFUUkpRa0ZSUVZsMmJtUmxVbUl5VTFCcFRVSjFia1JzTld4UVNVUm9lR2xzYTAxR2VsZHhTa2RxU0Vzd2RucGFUMngzZHdwVEsxbHdjamREUlROTmJYWlpURFZJWnpaRlVqZDFNRmgyVEhsTldXNU5RMjVXT1ZSVk5XdDBZa2t3YWxKblZYaEhVbGhGTmtaTFoweEhUbHBYZVhGdENrRXJSMnBPTkZGTmN6UkdRVFU0WmpSblRHMXJVbXg0VGxnNVRqQXhUMVpYWm1wS2RVNW5MelJLTVRKdlRGRmlRV3A0WkZBMlVEUm5RMlpYTmxSYVZqSUtiVU41V1hSQlQxUXZlREZhYUhaaGJtcFZZazkyTTFjclowSXlaWEpsVFVsVE1sSTRjMDF2Y25BemRXTkhXRU5RTlRCNlVrcFJMMnBHYm5KeFVrNXliZ3BpY1c5WmFqQnNhVWhMVmxBME5VaFRiVWRMVERsTFUwdFRNSE40TjNWSmJHOXdRamM1TDFkeFZEaERWWGh2ZVd4UVdYZHBkRWhXVkRVNWVuUTNkbWg2Q2pkaVRGaDJUa2xQVUc1TmVIcDJTMjVVT0VScU9IRjRLMHA0ZVhJMFQwSnpNMmRwT1d0cGVIZ0tMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICAgIHNlcnZlcjogaHR0cHM6Ly9jbHVzdGVyLTYyYTgzNDQzMjBkODAzNTUzZDBmMGI0Zi5wcm94eS5kZXYuc3BlY3Ryb2Nsb3VkLmNvbTo0NDMKICBuYW1lOiBjbHVzdGVyLXQtMgpjb250ZXh0czoKLSBjb250ZXh0OgogICAgY2x1c3RlcjogY2x1c3Rlci10LTIKICAgIHVzZXI6IGNsdXN0ZXItdC0yLWFkbWluCiAgbmFtZTogY2x1c3Rlci10LTItYWRtaW5AY2x1c3Rlci10LTIKY3VycmVudC1jb250ZXh0OiBjbHVzdGVyLXQtMi1hZG1pbkBjbHVzdGVyLXQtMgpraW5kOiBDb25maWcKcHJlZmVyZW5jZXM6IHt9CnVzZXJzOgotIG5hbWU6IGNsdXN0ZXItdC0yLWFkbWluCiAgdXNlcjoKICAgIGNsaWVudC1jZXJ0aWZpY2F0ZS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSRmVrTkRRV1oxWjBGM1NVSkJaMGxKVFZKR05HeElkWEpaVVVGM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEVKUlFYZEdWRVZVVFVKRlIwRXhWVVVLUVhoTlMyRXpWbWxhV0VwMVdsaFNiR042UVdWR2R6QjVUV3BCTWsxVVVYZE9la0V6VGtSb1lVWjNNSGxOZWtFeVRWUlJkMDU2UlhsT1JHeGhUVVJSZUFwR2VrRldRbWRPVmtKQmIxUkViazQxWXpOU2JHSlVjSFJaV0U0d1dsaEtlazFTYTNkR2QxbEVWbEZSUkVWNFFuSmtWMHBzWTIwMWJHUkhWbnBNVjBackNtSlhiSFZOU1VsQ1NXcEJUa0puYTNGb2EybEhPWGN3UWtGUlJVWkJRVTlEUVZFNFFVMUpTVUpEWjB0RFFWRkZRWHBRVUM5VVdWSnFlV3hRY0ZaME4xRUthRmRoZWtkYVpXMURPR3hXUlhSTlpXNVRSVWQxTjFVMFFYVmlOMHhwTVdzeVdYSk9WMUJJV1VoMUwyZEtNVmhpYW1rdlEzTjNkamN6TWxrMFZ6VjVlUXBvTVZCT2IzWmpTSEUzWTBOVGRUQTVkekp5ZVVVek1GUTVXRW8yUVZCS1pYVnBOVk53TUV4dWNIWTBXWFZGVkUxTE1HTkdTbWw2Wm1WVGFsSmxVVVF6Q2xWcGNVSnVZbUl2V0V4RFRFMUhVVlpzTlVoNU5XVjRRMnB2UzBsMVJEazJXbVJXYlc1R1EzSm5kR0V3V1dWb01VUXdVWGRvVTNFNE0zQjRXWFZTVm00S04zVm1hQzloTm10c2RXbEVSa0k0UzBkWlMwaGFXRFZzYTA5Qk1pOVFNM0I1YmpnNVZHTjJjbXBCWkVKWVIwRlFNSHBrUkU1bVV6a3hZM05HUjJneE5ncDVTVzUwU25sWE5VdFJWRWs1Vm5SM1UxSjBURUpRU1UxRFREQXdPREYyUkRGcVZWSjFjMVZVY0VONFJHMHlaamsxY0RGV1EzbHlOemxhWVhSYUsyTkJDbWhKWkM4dmQwbEVRVkZCUW04d1ozZFNha0ZQUW1kT1ZraFJPRUpCWmpoRlFrRk5RMEpoUVhkRmQxbEVWbEl3YkVKQmQzZERaMWxKUzNkWlFrSlJWVWdLUVhkSmQwaDNXVVJXVWpCcVFrSm5kMFp2UVZWaGJVMW5NbEJNWlZGUk1TOUpOMFp1UkhOVU9HRXhTSHBZSzFsM1JGRlpTa3R2V2tsb2RtTk9RVkZGVEFwQ1VVRkVaMmRGUWtGSFFtUXZLMVEyZG0wclpTdHJVSGxPTjJaMVFrdGxSVlZDTlRSalZVbFRUM2htU0VJMWFYUXdiR2RMWjFSa2JXOTZVR05hVVV4akNqa3hWRkJXU2xGbVVHWnBjRlZUWXpOcFYyNWFjV3czWlZWNlpTOTFVMk14ZFdrNFoyY3hUSFZQT1VacmVFWm9lVEpDU0VRNE1WaHNNMU5DYTNsSFFtVUtTWE5IYVV3eVVGRnZiMWxMVVhJMlluVnpLM1p3TVVNMWVrZzFiMkZDTmtWRk5UTkhOMUpsT1VaTFNrRjVSVWN2SzNjM1FuTlBaRmhtTUVWMVFubzVkZ3A1U2s1dlIwbDVjVFJwU0haTWNFRjFNWEZKWkRocllWVkhWbVJzUlN0aE5HMW1OMDlzWlZJNVpXcEdjRUpzT0ZGT0wyOVdUaXN5VEZjMGEyNU1aMUY0Q2taeWJ6ZHBUWG8zTDFONWMyNTZkM0ExYzJwV1JGZG1kbEU1TmpoM01uZFhSRTFxT0hkRFVXcHpaRk5GT0d0SVFVVlBieTlYTDJsS1duQlNNV0UwTW5NS2VtaFZRbGRtVTJKeFJUSTFlakpCTW5Jck9IRldOaTl5VkhSaE1tVXhkejBLTFMwdExTMUZUa1FnUTBWU1ZFbEdTVU5CVkVVdExTMHRMUW89CiAgICBjbGllbnQta2V5LWRhdGE6IExTMHRMUzFDUlVkSlRpQlNVMEVnVUZKSlZrRlVSU0JMUlZrdExTMHRMUXBOU1VsRmNFRkpRa0ZCUzBOQlVVVkJlbEJRTDFSWlVtcDViRkJ3Vm5RM1VXaFhZWHBIV21WdFF6aHNWa1YwVFdWdVUwVkhkVGRWTkVGMVlqZE1hVEZyQ2pKWmNrNVhVRWhaU0hVdlowb3hXR0pxYVM5RGMzZDJOek15V1RSWE5YbDVhREZRVG05MlkwaHhOMk5EVTNVd09YY3ljbmxGTXpCVU9WaEtOa0ZRU21VS2RXazFVM0F3VEc1d2RqUlpkVVZVVFVzd1kwWkthWHBtWlZOcVVtVlJSRE5WYVhGQ2JtSmlMMWhNUTB4TlIxRldiRFZJZVRWbGVFTnFiMHRKZFVRNU5ncGFaRlp0YmtaRGNtZDBZVEJaWldneFJEQlJkMmhUY1RnemNIaFpkVkpXYmpkMVptZ3ZZVFpyYkhWcFJFWkNPRXRIV1V0SVdsZzFiR3RQUVRJdlVETndDbmx1T0RsVVkzWnlha0ZrUWxoSFFWQXdlbVJFVG1aVE9URmpjMFpIYURFMmVVbHVkRXA1VnpWTFVWUkpPVlowZDFOU2RFeENVRWxOUTB3d01EZ3hka1FLTVdwVlVuVnpWVlJ3UTNoRWJUSm1PVFZ3TVZaRGVYSTNPVnBoZEZvclkwRm9TV1F2TDNkSlJFRlJRVUpCYjBsQ1FVRlJNbGsyU0hoUVlXWlVOemRFVlFwYVdUZEpXRXBuUkVWUGRXWkhUSFZLVlZaRVJHUkJURFZ3TkhkUWRWVjJjWEpQTnpOMGJEZEZiMklyU2tOS09XMVhWblpxZVZkdGNYSnRUMkZGTUVJeUNubFJhVlpDVmpNM1J6bEtRWE5pUW1WcVpURjBWR3R3ZFZGTVNFUjROVkZ5V25nd1IyaE1XbWhZY1dWR1FUTmpUMGQyUVhONGIwNVNWM053TDNRd1dqUUtZVnA2Y25WTWVFbElXbTFJUnpKV1JVOVdiR3BMTkROclVFUXpNMnRYVW5ONGVrdzVja3hqUVc1dFUwVkVSRmxVSzJWNk16TnBTRmh0YVRkbFVEWnlkZ3BPUVRRM1NVbHRRU3RyU0dNeU1tZHZUR3AxYzFCM04wTXJVR0ZwYmtsR1RVSXljakJuYnpSSlVEaDVUVXBuTDNGRmNrVnFaM2hPZDFGTk9VcGpaMDUxQ25KbVJFTlFORzlPVTBGS1EzRjVVMll3VVhsS1JGSk1halUyT1RjNVdWUnhha050TW1Kd2QyOU5PWGhhUVVZeldVbG5SMlJQTHpkekwwUjZWblFyT0hNS1MwMXNMMGhxUlVObldVVkJlbEJrTlZOYVZHUjRSMmRUT1VZd1pVSnJXV1IxYzFGb1UySm1aRTF0Wm5oa2VEUkdMMjEyZUdWbFNreHBXVFZDYm5saGR3cExLMnBNVm1od01FSmtWa1V3TjA1WlprTXJPQ3Q0Ym00eU1ERkpjazgyUW1KYWRrMXBVR28wVUhrNE1tOXNWMHhLU0VObGRtSlZiWFprTlZGUlJWSkpDa2w0ZGxaSE5IZzBMMHc1Ym5RelZXUmtRVE5CVHpaV2FEVjNUbmR1ZG5Ga1NXOTZTVWhPVkVkaVkwWmhVMk5OYnpsV1lXZFZkR05EWjFsRlFTOHZkVzhLWWtsc1dHVmphazFZYnpZNGFVaFNVME13VVd0NVNFeHFaa3hET1hsT01EVkRVa3RpWVc1VmRrVTJZbmhvTkRnck5YQlRXR2RWTW5sRVZrMXZkMjlXY0FwUVIwcFVkbVJNVUhkdk1YWnNObGh2ZUM4NFptSlNXVzVPV2taMlpGZHhURzVXWW5WMlZuUndLME5ZYkdaYWVuZEJORGxUWWtWNGFXaHBPV1JUUW5rM0NqWTRVWEJuTmpOWlVHcExORVpvTlZOYVJ6QnpTbUk0TnpKdVRESklVMlZ5Ym1OYVdIWjRhME5uV1VGSWFubFVkeXR6VjBoQ1pFOVdTVmswUnpaNlZWUUtaVEJLUkVKeU0yOXhkalo2ZUhVMmRuRkhiRFprYTJOVk5YRk5lVGRIYkZrMVZHZERhaXN3ZUdabFJWRTRZVGxWZGxOdU5rWk5WMEpUUVU1cVNsWlRkUXB3ZVRGUE5pdGxlalZPYW1RclkzVnpOVEUxYWxoeVpqQkVjWFpzUVhRcmNVMDRLMVJQV1ZsSmVFVktaQ3RNY2tOWFprNDFMelp3ZUhFMldFOXdlVEVyQ2xwaVZFaHZNakZEUWxCNVFXUmxjMlo1VkdOWFpIZExRbWRSUXpOM1EzQlRXSFpTVVVVelprRnRTekV4VG1sd0szTTVaa1J0T1ZRMFpVNWhSRVJYYjFnS2RsTmxZVGMyZEhaaEwwMU5ORU5NUXpKbU9ETmliRXBXYUd4Q1NEaG5Vbk4xUW1oemRIQnpNR2xPY1VZdlV6VjNRV2MzU1NzMVNVSjJabWhKVkUxalZBcHNiMlZvYm1KRlpqQXZVVGhwZURoMlRIWTFNMmgzTVdsVVZGZHJkMmgxVkZScGFVOTNXV1p6Wm1aUWRYcExNVkZOV2pONlMzRmpTVlpIVjJVMFFUaDBDa2h0WkRKWlVVdENaMUZEYzBReGJqVmtWamgxYjJKaVUxcENNblZ0WW5CcU5FcElTVFE0WW1wbFVUQlllRWRQV0ZSSFMwMXpXRVJKUVdwWlZuRXhWWG9LWVRrdmVsUmpTMVZyYTFwS05HRmFUVmRHYjIxeVdqZFlPSE5VZDJwRE9FaHROM2gzZVVoRk9EZHJPRTB4YnpSRWEwSnlTbEpuYTFwdFJXeGFUakZPWkFvMlNrdFRaREJDV0ZKR1VVOHhWR3RCVFc1U1dYUmlObTVVUkVOdk1VTmFObVZuY25GVE5rVjFhRkJvUW1wdWEwcEtibEpWTjJjOVBRb3RMUzB0TFVWT1JDQlNVMEVnVUZKSlZrRlVSU0JMUlZrdExTMHRMUW89Cgo=",
		UserName:   fmt.Sprintf("random%v", rand.Int()),
		Password:   "",
		ClusterUid: spc,
	}
}

func GetHttpClientWithCert(certPath, key string, insecure bool) *nethttp.Client {
	return util.GetHttpClientWithTls(certPath, key, insecure)
}

func (h *UserInfo) GetKubeConfig() (string, error) {
	cnf := GetConfig()
	cli := GetHttpClientWithCert(cnf.Hubble.Tls.Certificate, cnf.Hubble.Tls.CertificateKey, cnf.Hubble.Tls.IsInsecure)
	subPath := fmt.Sprintf("v1/spectroclusters/{uid}/assets/kubeconfigclient?Authorization=%v", h.Token)
	res, err := cli.Get(fmt.Sprintf("https://%v/%v", h.cli.Endpoint, subPath))
	if err != nil {
		return "", err
	}
	respBody, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return "", err
	}
	var respMap map[string]interface{}
	e := json.Unmarshal(respBody, &res)
	if e != nil {
		return "", e
	}
	fmt.Println(respMap)
	return respMap["kubeconfig"].(string), nil
}

func (h *UserInfo) GetUserInfo() (string, error) {
	cnf := GetConfig()
	cli := GetHttpClientWithCert(cnf.Hubble.Tls.Certificate, cnf.Hubble.Tls.CertificateKey, cnf.Hubble.Tls.IsInsecure)
	subPath := "v1/users/me"
	res, err := cli.Get(fmt.Sprintf("https://%v/%v", h.cli.Endpoint, subPath))
	if err != nil {
		return "", err
	}
	respBody, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return "", err
	}
	var respMap map[string]interface{}
	e := json.Unmarshal(respBody, &res)
	if e != nil {
		return "", e
	}
	fmt.Println(respMap)
	return "", nil
}
